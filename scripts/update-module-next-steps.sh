#!/usr/bin/env bash
set -euo pipefail

# update-module-next-steps.sh
#
# Updates the "Next Steps" section in a module's documentation
# Usage: ./scripts/update-module-next-steps.sh <module-name> <action> [task-description]
#
# Examples:
#   ./scripts/update-module-next-steps.sh bridge add "Implement streaming API endpoint"
#   ./scripts/update-module-next-steps.sh bridge complete "Create /bridge route"
#   ./scripts/update-module-next-steps.sh governance list

script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
repo_root="$(cd "${script_dir}/.." && pwd)"
cd "${repo_root}"

usage() {
  cat <<EOF
Usage: $0 <module-name> <action> [task-description]

Manages Next Steps in module documentation.

Arguments:
  module-name        Module name (e.g., bridge, governance, profiles)
  action             Action: add, complete, list, init
  task-description   Task to add or mark complete (required for add/complete)

Actions:
  add       Add a new task to Next Steps
  complete  Mark a task as completed (moves to Done section)
  list      Show current next steps
  init      Initialize Next Steps section if missing

Examples:
  $0 bridge add "Implement streaming API endpoint"
  $0 bridge complete "Create /bridge route"
  $0 governance list
  $0 profiles init

EOF
  exit 1
}

if [[ $# -lt 2 ]]; then
  usage
fi

MODULE_NAME="$1"
ACTION="$2"
TASK="${3:-}"

# Find module doc file
MODULE_DOC=""
if [[ -f "docs/modules/${MODULE_NAME}.md" ]]; then
  MODULE_DOC="docs/modules/${MODULE_NAME}.md"
elif [[ -f "docs/modules/${MODULE_NAME}/README.md" ]]; then
  MODULE_DOC="docs/modules/${MODULE_NAME}/README.md"
elif [[ -f "docs/modules/${MODULE_NAME}/landing-pilot.md" ]]; then
  MODULE_DOC="docs/modules/${MODULE_NAME}/landing-pilot.md"
else
  echo "ERROR: Module doc not found for '${MODULE_NAME}'" >&2
  echo "Searched:" >&2
  echo "  - docs/modules/${MODULE_NAME}.md" >&2
  echo "  - docs/modules/${MODULE_NAME}/README.md" >&2
  echo "  - docs/modules/${MODULE_NAME}/landing-pilot.md" >&2
  exit 1
fi

echo "Using module doc: ${MODULE_DOC}"

init_next_steps() {
  if grep -q "^## Next Steps" "${MODULE_DOC}"; then
    echo "Next Steps section already exists"
    return
  fi

  cat >> "${MODULE_DOC}" <<'EOF'

---

## Next Steps

### To Do
- [ ] Add tasks here as development progresses

### In Progress
- Currently being worked on

### Done
- Completed items move here

---

*Last updated: Auto-generated by update-module-next-steps.sh*
EOF

  echo "✓ Initialized Next Steps section in ${MODULE_DOC}"
}

list_next_steps() {
  if ! grep -q "^## Next Steps" "${MODULE_DOC}"; then
    echo "No Next Steps section found. Run: $0 ${MODULE_NAME} init"
    return 1
  fi

  echo "=== Next Steps for ${MODULE_NAME} ==="
  sed -n '/^## Next Steps/,/^## /p' "${MODULE_DOC}" | head -n -1
}

add_task() {
  if [[ -z "${TASK}" ]]; then
    echo "ERROR: Task description required for 'add' action" >&2
    usage
  fi

  if ! grep -q "^## Next Steps" "${MODULE_DOC}"; then
    echo "Next Steps section not found. Initializing..."
    init_next_steps
  fi

  # Add task under "To Do" section
  # Find the line with "### To Do", then insert after it
  awk -v task="- [ ] ${TASK}" '
    /^### To Do/ { print; print task; next }
    { print }
  ' "${MODULE_DOC}" > "${MODULE_DOC}.tmp" && mv "${MODULE_DOC}.tmp" "${MODULE_DOC}"

  echo "✓ Added task to ${MODULE_NAME}: ${TASK}"
}

complete_task() {
  if [[ -z "${TASK}" ]]; then
    echo "ERROR: Task description required for 'complete' action" >&2
    usage
  fi

  # Find task with partial match and mark as done
  if grep -q "\- \[ \] .*${TASK}" "${MODULE_DOC}"; then
    # Move task from To Do to Done section
    COMPLETED_TASK=$(grep "\- \[ \] .*${TASK}" "${MODULE_DOC}" | head -1 | sed 's/\- \[ \]/- [x]/')

    # Remove from current location
    sed -i "/\- \[ \] .*${TASK}/d" "${MODULE_DOC}"

    # Add to Done section
    awk -v task="${COMPLETED_TASK}" '
      /^### Done/ { print; print task; next }
      { print }
    ' "${MODULE_DOC}" > "${MODULE_DOC}.tmp" && mv "${MODULE_DOC}.tmp" "${MODULE_DOC}"

    echo "✓ Marked as complete: ${TASK}"
  else
    echo "ERROR: Task not found matching: ${TASK}" >&2
    exit 1
  fi
}

case "${ACTION}" in
  init)
    init_next_steps
    ;;
  list)
    list_next_steps
    ;;
  add)
    add_task
    ;;
  complete)
    complete_task
    ;;
  *)
    echo "ERROR: Unknown action '${ACTION}'" >&2
    usage
    ;;
esac

echo "MODULE_NEXT_STEPS=OK"
